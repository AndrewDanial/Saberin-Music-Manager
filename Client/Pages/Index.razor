@page "/"
@using music_manager_starter.Shared

@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Web

@code {
    private List<Song> songs;
    private Song selectedSong = new Song();
    private bool songDetailsVisible = false;

    [CascadingParameter]
    public string? searchValue { get; set; }
    [CascadingParameter]
    public SearchType searchType { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        songs = await Http.GetFromJsonAsync<List<Song>>("api/songs");
        searchValue = "";
    }

    private async Task HandleRemove(Guid songId)
    {
        var response = await Http.DeleteAsync($"api/songs/{songId}");

        songs = await Http.GetFromJsonAsync<List<Song>>("api/songs");
    }

    private void ShowDetails(Song song)
    {
        songDetailsVisible = true;
        selectedSong = song;
    }

    private void CloseModal() {
        songDetailsVisible = false;
    }

}

<div class="p-0 min-h-screen bg-pattern flex flex-col items-center justify-center ">
    <h2 class="text-3xl font-bold text-white mb-8 text-center">Song Library</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8 ">
        @if (songs != null && songs.Count > 0)
        {
            @foreach (var song in songs)
            {
                // If the search value is empty, show all songs.
                @if (searchValue != "") 
                {
                    // If a song doesn't meet these filters, skip showing it
                    @if (searchType == SearchType.Title && !song.Title.StartsWith(searchValue))
                    {
                        continue;
                    }
                    @if (searchType == SearchType.Artist && !song.Artist.StartsWith(searchValue))
                    {
                        continue;
                    }
                    @if (searchType == SearchType.Album && !song.Album.StartsWith(searchValue))
                    {
                        continue;
                    }
                }
              
                    <div @onclick="() => ShowDetails(song)" class="glass p-6 border border-gray-300 rounded-lg text-white transition-transform transform hover:scale-105 hover:shadow-xl cursor-pointer">
                        <div class="opposite-ends">
                            @* Song Title *@
                            <h3 class="text-xl font-semibold mb-2">@song.Title</h3>
                            @* Delete Button *@
                        <button @onclick:stopPropagation="true" @onclick="() => HandleRemove(song.Id)" class="text-red-50 border-gray-300 border border-solid rounded-lg p-1 hover:bg-purple-900">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" width="32px" height="32px">
                                    <path fill="#ec0000" d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z" />
                                </svg>
                            </button>
                            
                        </div>
                        <p class="text-md">Artist: <span class="font-light">@song.Artist</span></p>
                    </div>
                
                
            }
        }
       
    </div>
    <SongDetails Song="selectedSong" IsVisible="songDetailsVisible" OnModalClosed="CloseModal"></SongDetails>
    @if (songs == null || songs.Count == 0) {
        <div class="relative col-span-1 text-center text-gray-400">No songs found.</div>
    }
</div>

<style>
    .bg-pattern {
        background: linear-gradient( rgba(31, 41, 55, 0.7), rgba(31, 41, 55, 0.7) ), url('dalle.webp');
        background-size: cover;
        background-position: center;
        font-family: 'Rajdhani', sans-serif;
    }


    .glass {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px); 
        border-radius: 10px; 
        position: relative; 
        overflow: hidden; 
        min-width: 200px;
    }

    .glass:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        pointer-events: none; 
    }

    .opposite-ends {
        display: flex;
        justify-content: space-between;
    }
    
      
</style>